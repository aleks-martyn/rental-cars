{"version":3,"file":"static/js/197.fe4b4933.chunk.js","mappings":"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","sources":["pages/FavoritesPage/FavoritesPage.jsx","js/getFavoriteCars.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { debounce } from 'lodash';\nimport { fetchAllCars } from 'services/api';\nimport { CarList } from 'components/CarList';\nimport { getFavoriteCars } from 'js/getFavoriteCars';\nimport { getUniqueBrands } from 'js/getUniqueBrands';\nimport { getFilteredCars } from 'js/getFilteredCars';\nimport { load, save, remove } from 'js/localStorageFunctions';\nimport useLocalStorage from 'hooks/useLocalStorage';\nimport { Spinner } from 'components/Loader';\nimport { DropdownMenu } from 'components/DropdownMenu';\nimport {\n  FAVORITES_KEY,\n  SELECTED_BRAND,\n  SELECTED_PRICE,\n  MIN_MILEAGE,\n  MAX_MILEAGE,\n  Status,\n} from 'constants';\n\nexport default function FavoritesPage() {\n  const [allCars, setAllCars] = useState([]);\n  const [storedFavoritesIds, setStoredFavoritesIds] = useState([]);\n  const [favoriteCars, setFavoriteCars] = useState([]);\n  const [selectedBrand, setSelectedBrand] = useLocalStorage(\n    SELECTED_BRAND,\n    'Enter the text'\n  );\n  const [selectedPrice, setSelectedPrice] = useLocalStorage(\n    SELECTED_PRICE,\n    'To $'\n  );\n  const [minMileage, setMinMileage] = useLocalStorage(MIN_MILEAGE, '');\n  const [maxMileage, setMaxMileage] = useLocalStorage(MAX_MILEAGE, '');\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState(Status.PENDING);\n  const [filteredCars, setFilteredCars] = useState([]);\n  const [filterMinMileage, setFilterMinMileage] = useLocalStorage(\n    MIN_MILEAGE,\n    ''\n  );\n  const [filterMaxMileage, setFilterMaxMileage] = useLocalStorage(\n    MAX_MILEAGE,\n    ''\n  );\n\n  const debounsedMinMileage = useRef(\n    debounce(value => setFilterMinMileage(value), 300)\n  ).current;\n\n  const debounsedMaxMileage = useRef(\n    debounce(value => setFilterMaxMileage(value), 300)\n  ).current;\n\n  useEffect(() => {\n    fetchAllCars()\n      .then(res => {\n        setAllCars(res);\n        setError(null);\n        setStatus(Status.RESOLVED);\n      })\n      .catch(error => {\n        setError(error);\n        setStatus(Status.REJECTED);\n      });\n\n    setStoredFavoritesIds(load(FAVORITES_KEY) ?? []);\n  }, []);\n\n  useEffect(() => {\n    setFavoriteCars(getFavoriteCars(storedFavoritesIds, allCars));\n  }, [allCars, storedFavoritesIds]);\n\n  useEffect(() => {\n    if (favoriteCars.length === 0) setFilteredCars([]);\n\n    const filter = {\n      brand: selectedBrand,\n      price: selectedPrice,\n      minMileage: filterMinMileage,\n      maxMileage: filterMaxMileage,\n    };\n\n    setFilteredCars(getFilteredCars(favoriteCars, filter));\n  }, [\n    favoriteCars,\n    selectedBrand,\n    selectedPrice,\n    filterMinMileage,\n    filterMaxMileage,\n  ]);\n\n  useEffect(() => {\n    return () => {\n      debounsedMinMileage.cancel();\n      debounsedMaxMileage.cancel();\n    };\n  }, [debounsedMinMileage, debounsedMaxMileage]);\n\n  const toggleFavorite = id => {\n    const newFavoritesIds = storedFavoritesIds.filter(carId => carId !== id);\n\n    setStoredFavoritesIds(newFavoritesIds);\n\n    save(FAVORITES_KEY, newFavoritesIds);\n  };\n\n  const handleChange = (id, value) => {\n    switch (id) {\n      case 'brand':\n        setSelectedBrand(value);\n        save(SELECTED_BRAND, value);\n        break;\n\n      case 'price':\n        setSelectedPrice(Number(value));\n        save(SELECTED_PRICE, Number(value));\n        break;\n\n      case 'min':\n        setMinMileage(value);\n        debounsedMinMileage(value);\n        save(MIN_MILEAGE, value);\n        break;\n\n      case 'max':\n        setMaxMileage(value);\n        debounsedMaxMileage(value);\n        save(MAX_MILEAGE, value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleReset = () => {\n    setSelectedBrand('Enter the text');\n    setSelectedPrice('To $');\n    setMinMileage('');\n    setMaxMileage('');\n    setFilterMinMileage('');\n    setFilterMaxMileage('');\n\n    remove(SELECTED_BRAND);\n    remove(SELECTED_PRICE);\n    remove(MIN_MILEAGE);\n    remove(MAX_MILEAGE);\n  };\n\n  return (\n    <>\n      <DropdownMenu\n        brands={getUniqueBrands(favoriteCars)}\n        onFilterChange={handleChange}\n        onFilterReset={handleReset}\n        selectedBrand={selectedBrand}\n        selectedPrice={selectedPrice}\n        minMileage={minMileage}\n        maxMileage={maxMileage}\n      />\n      {status === Status.PENDING && <Spinner />}\n      {status === Status.REJECTED && <h3>{error?.message}</h3>}\n      {status === Status.RESOLVED && filteredCars.length > 0 && (\n        <CarList cars={filteredCars} toggleFavorite={toggleFavorite} />\n      )}\n    </>\n  );\n}\n","export const getFavoriteCars = (carIds, cars) => {\n  if (!cars || !carIds || carIds.length === 0 || cars.length === 0) return [];\n\n  const favoriteCars = [];\n\n  for (const car of cars) {\n    if (carIds.includes(car.id)) {\n      favoriteCars.push(car);\n    }\n  }\n  return favoriteCars;\n};\n"],"names":["FavoritesPage","useState","allCars","setAllCars","storedFavoritesIds","setStoredFavoritesIds","favoriteCars","setFavoriteCars","useLocalStorage","SELECTED_BRAND","selectedBrand","setSelectedBrand","SELECTED_PRICE","selectedPrice","setSelectedPrice","MIN_MILEAGE","minMileage","setMinMileage","MAX_MILEAGE","maxMileage","setMaxMileage","error","setError","Status","status","setStatus","filteredCars","setFilteredCars","filterMinMileage","setFilterMinMileage","filterMaxMileage","setFilterMaxMileage","debounsedMinMileage","useRef","debounce","value","current","debounsedMaxMileage","useEffect","fetchAllCars","then","res","catch","load","FAVORITES_KEY","carIds","cars","length","car","includes","id","push","getFavoriteCars","filter","brand","price","getFilteredCars","cancel","DropdownMenu","brands","getUniqueBrands","onFilterChange","save","Number","onFilterReset","remove","message","CarList","toggleFavorite","newFavoritesIds","carId"],"sourceRoot":""}