{"version":3,"file":"static/js/197.1141164c.chunk.js","mappings":"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","sources":["pages/FavoritesPage/FavoritesPage.jsx","js/getFavoriteCars.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { debounce } from 'lodash';\nimport { fetchAllCars } from 'services/api';\nimport { CarList } from 'components/CarList';\nimport { getFavoriteCars } from 'js/getFavoriteCars';\nimport { getUniqueBrands } from 'js/getUniqueBrands';\nimport { getFilteredCars } from 'js/getFilteredCars';\nimport { load, save, remove } from 'js/localStorageFunctions';\nimport { Spinner } from 'components/Loader';\nimport { DropdownMenu } from 'components/DropdownMenu';\nimport {\n  FAVORITES_KEY,\n  SELECTED_BRAND,\n  SELECTED_PRICE,\n  MIN_MILEAGE,\n  MAX_MILEAGE,\n} from 'constants';\n\nexport default function FavoritesPage() {\n  const [allCars, setAllCars] = useState([]);\n  const [storedFavoritesIds, setStoredFavoritesIds] = useState([]);\n  const [favoriteCars, setFavoriteCars] = useState([]);\n  const [selectedBrand, setSelectedBrand] = useState('Enter the text');\n  const [selectedPrice, setSelectedPrice] = useState('To $');\n  const [minMileage, setMinMileage] = useState('');\n  const [maxMileage, setMaxMileage] = useState('');\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('pending');\n  const [filteredCars, setFilteredCars] = useState([]);\n  const [filterMinMileage, setFilterMinMileage] = useState('');\n  const [filterMaxMileage, setFilterMaxMileage] = useState('');\n\n  const debounsedMinMileage = useRef(\n    debounce(value => setFilterMinMileage(value), 300)\n  ).current;\n\n  const debounsedMaxMileage = useRef(\n    debounce(value => setFilterMaxMileage(value), 300)\n  ).current;\n\n  useEffect(() => {\n    fetchAllCars()\n      .then(res => {\n        setAllCars(res);\n        setError(null);\n        setStatus('resolved');\n      })\n      .catch(error => {\n        setError(error);\n        setStatus('rejected');\n      });\n\n    setStoredFavoritesIds(load(FAVORITES_KEY) ?? []);\n  }, []);\n\n  useEffect(() => {\n    setFavoriteCars(getFavoriteCars(storedFavoritesIds, allCars));\n  }, [allCars, storedFavoritesIds]);\n\n  useEffect(() => {\n    const savedBrand = load(SELECTED_BRAND);\n    if (savedBrand) {\n      setSelectedBrand(savedBrand);\n    }\n\n    const savedPrice = load(SELECTED_PRICE);\n    if (savedPrice) {\n      setSelectedPrice(savedPrice);\n    }\n\n    const savedMinMileage = load(MIN_MILEAGE);\n    if (savedMinMileage) {\n      setMinMileage(savedMinMileage);\n      setFilterMinMileage(savedMinMileage);\n    }\n\n    const savedMaxMileage = load(MAX_MILEAGE);\n    if (savedMaxMileage) {\n      setMaxMileage(savedMaxMileage);\n      setFilterMaxMileage(savedMaxMileage);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (favoriteCars.length === 0) setFilteredCars([]);\n\n    const filter = {\n      brand: selectedBrand,\n      price: selectedPrice,\n      minMileage: filterMinMileage,\n      maxMileage: filterMaxMileage,\n    };\n\n    setFilteredCars(getFilteredCars(favoriteCars, filter));\n  }, [\n    favoriteCars,\n    selectedBrand,\n    selectedPrice,\n    filterMinMileage,\n    filterMaxMileage,\n  ]);\n\n  useEffect(() => {\n    return () => {\n      debounsedMinMileage.cancel();\n      debounsedMaxMileage.cancel();\n    };\n  }, [debounsedMinMileage, debounsedMaxMileage]);\n\n  const toggleFavorite = id => {\n    const newFavoritesIds = storedFavoritesIds.filter(carId => carId !== id);\n\n    setStoredFavoritesIds(newFavoritesIds);\n\n    save(FAVORITES_KEY, newFavoritesIds);\n  };\n\n  const handleChange = (id, value) => {\n    switch (id) {\n      case 'brand':\n        setSelectedBrand(value);\n        save(SELECTED_BRAND, value);\n        break;\n\n      case 'price':\n        setSelectedPrice(Number(value));\n        save(SELECTED_PRICE, Number(value));\n        break;\n\n      case 'min':\n        setMinMileage(value);\n        debounsedMinMileage(value);\n        save(MIN_MILEAGE, value);\n        break;\n\n      case 'max':\n        setMaxMileage(value);\n        debounsedMaxMileage(value);\n        save(MAX_MILEAGE, value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleReset = () => {\n    setSelectedBrand('Enter the text');\n    setSelectedPrice('To $');\n    setMinMileage('');\n    setMaxMileage('');\n    setFilterMinMileage('');\n    setFilterMaxMileage('');\n\n    remove(SELECTED_BRAND);\n    remove(SELECTED_PRICE);\n    remove(MIN_MILEAGE);\n    remove(MAX_MILEAGE);\n  };\n\n  return (\n    <>\n      <DropdownMenu\n        brands={getUniqueBrands(favoriteCars)}\n        onFilterChange={handleChange}\n        onFilterReset={handleReset}\n        selectedBrand={selectedBrand}\n        selectedPrice={selectedPrice}\n        minMileage={minMileage}\n        maxMileage={maxMileage}\n      />\n      {status === 'pending' && <Spinner />}\n      {status === 'rejected' && <h3>{error?.message}</h3>}\n      {status === 'resolved' && filteredCars.length > 0 && (\n        <CarList cars={filteredCars} toggleFavorite={toggleFavorite} />\n      )}\n    </>\n  );\n}\n","export const getFavoriteCars = (carIds, cars) => {\n  if (!cars || !carIds || carIds.length === 0 || cars.length === 0) return [];\n\n  const favoriteCars = [];\n\n  for (const car of cars) {\n    if (carIds.includes(car.id)) {\n      favoriteCars.push(car);\n    }\n  }\n  return favoriteCars;\n};\n"],"names":["FavoritesPage","useState","allCars","setAllCars","storedFavoritesIds","setStoredFavoritesIds","favoriteCars","setFavoriteCars","selectedBrand","setSelectedBrand","selectedPrice","setSelectedPrice","minMileage","setMinMileage","maxMileage","setMaxMileage","error","setError","status","setStatus","filteredCars","setFilteredCars","filterMinMileage","setFilterMinMileage","filterMaxMileage","setFilterMaxMileage","debounsedMinMileage","useRef","debounce","value","current","debounsedMaxMileage","useEffect","fetchAllCars","then","res","catch","load","FAVORITES_KEY","carIds","cars","length","car","includes","id","push","getFavoriteCars","savedBrand","SELECTED_BRAND","savedPrice","SELECTED_PRICE","savedMinMileage","MIN_MILEAGE","savedMaxMileage","MAX_MILEAGE","filter","brand","price","getFilteredCars","cancel","DropdownMenu","brands","getUniqueBrands","onFilterChange","save","Number","onFilterReset","remove","message","CarList","toggleFavorite","newFavoritesIds","carId"],"sourceRoot":""}